package HealingSeal
import Icons
import Abilities
import ClosureForGroups
import AbilityTooltipGenerator
import TheEmpyreanBuff
import ClosureEvents
import GameConstants
import CustomHeal

public constant HEALING_SEAL_ID = compiletime(ABIL_ID_GEN.next())

RealLevelClosure DAMAGE = lvl -> 80. + 60. * (lvl-1)
RealLevelClosure RADIUS = lvl -> 350.

init 
  EventListener.onTargetCast(HEALING_SEAL_ID) (caster, tunit) ->
    let lvl = caster.getAbilityLevel(HEALING_SEAL_ID)
    
    var healSealAddAOE = 0.

    let bEmpyreanBuff = caster.getBuff(TheEmpyreanBuff.typeId)
    let hasEmpyreanBuff = bEmpyreanBuff != null

    if hasEmpyreanBuff
      let empyreanBuff = bEmpyreanBuff castTo TheEmpyreanBuff
      healSealAddAOE = empyreanBuff.healSealAddAOE

    let spellDamage = DAMAGE.run(lvl)
    let spellRadius = RADIUS.run(lvl) + healSealAddAOE

    flashEffect(Abilities.holyBoltSpecialArt, tunit.getPos())

    if tunit.isAllyOf(caster)
      caster.healTarget(tunit, spellDamage)
      forUnitsInRange(tunit.getPos(), spellRadius) target ->
        if target.isEnemyOf(caster) and target.isAlive()
          flashEffect(Abilities.holyBoltSpecialArt, target.getPos())
          DamageEvent.setNextDamageFromCode()
          caster.damageTarget(target, spellDamage)
    else
      DamageEvent.setNextDamageFromCode()
      caster.damageTarget(tunit, spellDamage)
      forUnitsInRange(tunit.getPos(), spellRadius) target ->
        if target.isAllyOf(caster)
          flashEffect(Abilities.holyBoltSpecialArt, target.getPos())
          caster.healTarget(target, spellDamage)

@compiletime function genAbility()
  let tooltip = new AbilityTooltipGenerator("Hero heals an ally and deals damage to all enemies around it or deals damage to the enemy and heals allies around it.")
  new ChannelAbilityPreset(HEALING_SEAL_ID, NORMAL_SPELL_LEVELS, true, tooltip)
  ..setLevelSkipRequirement(0)
  ..presetIcon(Icons.bTNHolyBolt)
  ..presetButtonPosNormal(0, 2)
  ..presetButtonPosResearch(0, 0)

  ..tooltipStartListen()
  ..presetTargetTypes(Targettype.UNIT)
  ..presetHotkey("Q")
  ..setName("Healing Seal")
  ..addTooltipProperty("Damage/Heal", DAMAGE)
  ..addTooltipProperty("Damage/Heal Radius", RADIUS)
  ..presetManaCost(lvl -> 60 + 5 * lvl)
  ..presetCastRange(lvl -> 450)
  ..presetCooldown(lvl -> 8)
  ..tooltipStopListen()