package HealingSeal
import ClosureEvents
import Icons
import Abilities
import ClosureForGroups
import AbilityTooltipGenerator

public constant HEALING_SEAL_ID = compiletime(ABIL_ID_GEN.next())

RealLevelClosure HEALING_SEAL_DAMAGE = lvl -> 100. * lvl
RealLevelClosure HEALING_SEAL_RADIUS = lvl -> 350.

init 
  EventListener.onTargetCast(HEALING_SEAL_ID) (caster, tunit) ->
    let lvl = caster.getAbilityLevel(HEALING_SEAL_ID)
    let spellDamage = HEALING_SEAL_DAMAGE.run(lvl)
    let spellRadius = HEALING_SEAL_RADIUS.run(lvl)

    flashEffect(Abilities.holyBoltSpecialArt, tunit.getPos())

    if tunit.isAllyOf(caster)
      tunit.setHP(tunit.getHP()+spellDamage)
      forUnitsInRange(caster.getPos(), spellRadius) target ->
        if target.isEnemyOf(caster) and target.isAlive()
          flashEffect(Abilities.holyBoltSpecialArt, target.getPos())
          caster.damageTarget(target, spellDamage)
    else
      caster.damageTarget(tunit, spellDamage)
      forUnitsInRange(caster.getPos(), spellRadius) target ->
        if target.isAllyOf(caster)
          flashEffect(Abilities.holyBoltSpecialArt, target.getPos())
          tunit.setHP(target.getHP() + spellDamage)

@compiletime function genAbility()
  let tooltip = new AbilityTooltipGenerator("Hero heals an ally and deals damage to all enemies around it or deals damage to the enemy and heals allies around it.")
  new ChannelAbilityPreset(HEALING_SEAL_ID, 5, true, tooltip)
    ..setLevelSkipRequirement(0)
    ..presetButtonPosNormal(0, 2)

    ..tooltipStartListen()
    ..presetTargetTypes(Targettype.UNIT)
    ..presetHotkey("Q")
    ..setName("Healing Seal")
    ..presetIcon(Icons.bTNHolyBolt)
    ..addTooltipProperty("Damage/Heal", HEALING_SEAL_DAMAGE)
    ..addTooltipProperty("Damage/Heal Radius", HEALING_SEAL_RADIUS)
    ..presetManaCost(lvl -> 50 + 10 * lvl)
    ..presetCastRange(lvl -> 600)
    ..presetCooldown(lvl -> 8)
    ..tooltipStopListen()