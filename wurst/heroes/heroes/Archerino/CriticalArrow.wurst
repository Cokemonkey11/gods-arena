package CriticalArrow
import AbilityTooltipGenerator
import Icons
import DamageEvent
import StandardTextTags
import Tagwalk
import BuffObjEditing
import InstantDummyCaster
import Orders

public constant CRIT_ARROW_ID = compiletime(ABIL_ID_GEN.next())

constant ENTANGLE_ID = compiletime(ABIL_ID_GEN.next())
constant RealLevelClosure DAMAGE = lvl -> 25. + 15 * lvl
constant RealLevelClosure CHANCE = lvl -> 0.1 + 0.1 * lvl

init
    DamageEvent.addListener() -> 
        let attacker = DamageEvent.getSource()
        let lvl = attacker.getAbilityLevel(CRIT_ARROW_ID)
        if DamageEvent.getType() == DamageType.ATTACK and lvl > 0 and GetRandomReal(0, 1) < CHANCE.run(lvl)
            let damage = DAMAGE.run(lvl)
            DamageEvent.addAmount(damage)
            createCriticalStrikeTextTag(attacker, damage.toInt())

            if DamageEvent.getTarget().hasAbility(tagBuffObj.buffId)
                InstantDummyCaster.castTarget(attacker.getOwner(), ENTANGLE_ID, lvl, OrderIds.entanglingroots, DamageEvent.getTarget())



@compiletime function genAbility()
    let tooltip = new AbilityTooltipGenerator("Has a chance to deal extra damage.\nIf the target is tagged, it will always crit and also become entangled.")
    new ChannelAbilityPreset(CRIT_ARROW_ID, 5, true, tooltip)
    ..presetButtonPosNormal(0, 3)
    ..presetButtonPosResearch(0, 0)
    ..presetIcon(Icons.pASBTNCriticalStrike)

    ..tooltipStartListen()
    ..presetTargetTypes(Targettype.PASSIVE)
    ..addTooltipProperty("Extra Damage", DAMAGE)
    ..addTooltipProperty("Chance", CHANCE)
    ..presetHotkey("E")
    ..setName("Critical Arrow")
    ..tooltipStopListen()

    new AbilityDefinitionEntanglingRootscreep(ENTANGLE_ID)
    ..setDummyAbility()
    ..setLevels(5)
    ..presetDamageperSecond(lvl -> 10. * lvl)
        