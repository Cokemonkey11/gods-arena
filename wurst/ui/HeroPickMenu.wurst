package HeroPickMenu
import Icons
import FramehandleNames
import ClosureFrames
import HashMap
import Heroes
import PlayerData
import Hero
import GameConstants
import SoundUtils
import ItemShopUI
import DemonLordIds
import CustomStatSystem
// import GameStatistic
import Backpack

public HeroPickUI heroPickUI

constant playerSelection = new IterableMap<player, HeroIcon>

public function initHeroPickMenu()
  heroPickUI = new HeroPickUI()
  addHeroIcons()

function addHeroIcons()
  heroPickUI
  ..addHeroIcon(
    new HeroIcon(HYDROMANCER_ID, Icons.bTNJaina, Icons.dISBTNJaina)
    ..addTooltip("Hydromancer", "Drinks cool water. Summons elementals. Crushing."))
  ..addHeroIcon(
    new HeroIcon(TROLL_SHAMAN_ID, Icons.bTNShadowHunter, Icons.dISBTNShadowHunter)
    ..addTooltip("Troll Shaman", "Creates memes (not in game though)."))
  ..addHeroIcon(
    new HeroIcon(STORMBEARER_ID, Icons.bTNHeroMountainKing, Icons.dISBTNHeroMountainKing)
    ..addTooltip("Stormbearer", "Mighty lord of storms, good at cleaning groups of weak enemies, but lacks reliable single target damage."))
  ..addHeroIcon(
    new HeroIcon(BLADEMASTER_ID, Icons.bTNHeroBlademaster, Icons.dISBTNHeroBlademaster)
    ..addTooltip("Blademaster", "Flesh cutter. Can't go wrong with some illusions."))
  ..addHeroIcon(
    new HeroIcon(CRUSADER_ID, Icons.bTNArthas, Icons.dISBTNArthas)
    ..addTooltip("Crusader", "Holy warrior, can heal and buff allies, but also has strong buff for himself and his attacks are quite strong."))
  ..addHeroIcon(
    new HeroIcon(ASSASSIN_ID, Icons.bTNHeroWarden, Icons.dISBTNHeroWarden)
    ..addTooltip("Assassin", "Stealthy killer, good versus single targets."))
  ..addHeroIcon(
    new HeroIcon(DEMON_LORD_ID, Icons.bTNPitLord, Icons.dISBTNPitLord)
    ..addTooltip("Demon Lord", "Loves destruction. And Donuts."))
  ..addHeroIcon(
    new HeroIcon(ARCHER_ID, Icons.bTNSylvanusWindRunner, Icons.dISBTNSylvanusWindRunner)
    ..addTooltip("Archerino", "Shoots pointy sticks and is in tune with nature."))
  ..addHeroIcon(
    new HeroIcon(CRAB_ID, Icons.bTNLobstrokkBlue, Icons.dISBTNLobstrokkBlue)
    ..addTooltip("Crab", "Why do things keep evolving into crabs?"))

class HeroPickUI
  private var heroIconCounter = 0

  private constant PADDING = 0.03
  private constant HORIZONTAL_SPACING = 0.08
  private constant VERTICAL_SPACING = -0.08
  private constant ITEM_ICON_INITIAL_POSITION = vec2(PADDING, -PADDING * 2)
  private constant MAX_ICONS_PER_ROW = 7

  private constant didntSelectHeroSound = new SoundDefinition(Sounds.error)

  private var iconPosition = ITEM_ICON_INITIAL_POSITION

  constant heroPickFrame = createFrame("FRAME", "heroPickFrame", GAME_UI, "", 0)
  private constant heroPickBackdrop = createFrame("HeroPickMenuBackdrop", heroPickFrame, 0, 0)
  private constant heroPickButton = createFrame("GeneralButton", heroPickFrame, 0, 0)

  construct()
    heroPickFrame
    ..setSize(0.6, 0.35)
    ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.4, 0.52))

    createFrame(FramehandleTypeNames.text, "itemText", heroPickFrame, "", GetRandomInt(0, 1000000))
    ..setText("Choose your hero")
    ..setTextColor(colorA(255, 255, 255, 1))
    ..setPoint(FRAMEPOINT_TOPLEFT, heroPickFrame, FRAMEPOINT_TOP, vec2(0, -PADDING))
    ..setCenter()

    heroPickBackdrop.setAllPoints(heroPickFrame)

    heroPickButton
    ..setPoint(FRAMEPOINT_BOTTOM, heroPickFrame, FRAMEPOINT_BOTTOM, vec2(0, 0.02))
    ..setText("Pick Hero")
    ..onClick() ->
      let p = GetTriggerPlayer()

      if playerSelection.has(p)
        let pickedIcon = playerSelection.getAndRemove(p)
        let h = new Hero(p, pickedIcon.heroId, HERO_PICK_RECT.randomPoint().toVec3(), angle(0))
        let backpack = new Backpack(p, h.actor).actor
        
        pData.get(p).setHero(h)
        p.selectSingle(h.actor)
        p.setCameraPosition(h.actor.getPos())
        pickedIcon.disable()
        heroPickFrame.hide(p)

        toggleShopButton.show(p, h.actor)
        // toggleMultiboardButton.show(p)
        // toggleStatMultiboardButton.show(p)

        shop.showToUnit(h.actor)

        h.actor.addAbility(SELL_ID)
        backpack.addAbility(SELL_ID)

        // Setting starting stats for heroes
        h.actor.addStat(CustomUnitStats.ATTACK_CRIT_POWER, 0.5)
        h.actor.addStat(CustomUnitStats.SPELL_CRIT_POWER, 0.5)

        playerSelection.forEach() (player key, HeroIcon value) ->
          if value == pickedIcon
            playerSelection.remove(key)
      else
        p.print("Choose hero first!")
        didntSelectHeroSound.playForPlayer(p)

  function addHeroIcon(HeroIcon heroIcon)
    heroIconCounter++
    if heroIconCounter == 1
      skip
    else if (heroIconCounter - 1) % MAX_ICONS_PER_ROW == 0
      iconPosition = iconPosition.add(-HORIZONTAL_SPACING * (MAX_ICONS_PER_ROW - 1), VERTICAL_SPACING)
    else
      iconPosition = iconPosition.add(HORIZONTAL_SPACING, 0)

    heroIcon.setIconPosition(iconPosition)

class HeroIcon
  static private var globalIconContext = 0

  var heroId = 0
  private var iconContext = 0
  private var activeIcon = ""
  private var disabledIcon = ""

  private framehandle heroIconButton = null
  private framehandle heroIcon = null

  construct(int heroId, string activeIcon, string disabledIcon)
    this.heroId = heroId
    this.activeIcon = activeIcon
    this.disabledIcon = disabledIcon
    this.iconContext = globalIconContext
    globalIconContext++

    heroIconButton = createFrame(FramehandleTypeNames.gluebutton, "PickIconButton", heroPickUI.heroPickFrame, FramehandleNames.iconButtonTemplate, iconContext)
    heroIcon = createFrame(FramehandleTypeNames.backdrop, "pickIcon", heroIconButton, "", iconContext)

    heroIconButton
    ..setSize(0.05, 0.05)
    ..onClick() ->
      let p = GetTriggerPlayer()
      playerSelection.put(p, this)

    heroIcon
    ..setAllPoints(heroIconButton)
    ..setTexture(activeIcon, 0, true)

  function addTooltip(string tooltipTitle, string tooltipDescription)
    let tooltip = createFrame("BoxedText", heroIconButton, 0, iconContext)
    heroIconButton.setTooltip(tooltip)

    tooltip..setSize(0.2, 0.08)
    ..setPoint(FRAMEPOINT_LEFT, heroIconButton, FRAMEPOINT_RIGHT)
    getFrame("BoxedTextTitle", iconContext).setText("Pick " + COLOR_GOLD.toColorString() + tooltipTitle + "|r")
    getFrame("BoxedTextValue", iconContext)..setText("________\n\n"+tooltipDescription)

  function disable()
    heroIcon.setTexture(disabledIcon, 0, true)
    heroIconButton.disable()

  function setIconPosition(vec2 iconPosition)
    heroIconButton.setPoint(FRAMEPOINT_TOPLEFT, heroPickUI.heroPickFrame, FRAMEPOINT_TOPLEFT, iconPosition)