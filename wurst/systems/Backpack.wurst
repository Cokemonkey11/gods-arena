package Backpack
import ObjectIdGenerator
import HeroPreset
import ClosureTimers
import ItemShopUI
import Icons
import UnitIds
import AbilityIds
import PlayerData
import Entity

constant BACKPACK_ID = compiletime(HERO_ID_GEN.next())

public constant backpackUnits = new LinkedList<unit>

init
  // TODO cause desync for now
  // EventListener.add(EVENT_PLAYER_UNIT_SELECTED) -> 
  //   let selectedUnit = EventData.getTriggerUnit()

  //   if selectedUnit.hasAbility(AbilityIds.inventory)
  //     let shopWasVisible = shop.itemShopFrame.isVisible(selectedUnit.getOwner())
  //     shop.showToUnit(selectedUnit)
  //     // showToUnit() opens shop for now, so need to return shop in its initial state before unit selection
  //     if not shopWasVisible
  //       shop.toggleView(selectedUnit.getOwner(), selectedUnit)

  doPeriodically(1) (CallbackPeriodic cb) ->
    updateBackpackPos()

function updateBackpackPos()
  for backpack in backpackUnits
    let heroUnit = pData.get(backpack.getOwner()).getHero().hero.actor
    if heroUnit.isAlive()
      backpack.setPos(heroUnit.getPos())

public class Backpack extends UnitEntity
  constant unit backpackHero

  construct(player p, unit hero)
    super(createUnit(p, BACKPACK_ID, vec2(0, 0), angle(0)))
    backpackUnits.add(this.actor)
    backpackHero = hero

  ondestroy
    backpackUnits.remove(this.actor)

@compiletime function genBackpackDefinition()
  new HeroPreset(BACKPACK_ID, UnitIds.circleofpower, "Backpack")
  ..setName("Backpack")
  ..setIconGameInterface(Icons.bTNPackBeast)
  ..hideHeroDeathMsg(true)
  ..hideHeroMinimapDisplay(true)
  ..setHideMinimapDisplay(true)
  ..addNormalAbility(AbilityIds.invulnerable)
  ..setArmorType(ArmorType.Divine)
  ..setModelFile("")
  ..setScalingValue(0.)
  ..setSelectionScale(0)
  ..setCollisionSize(0.)
  ..setSightRadiusDay(0)
  ..setSightRadiusNight(0)
  ..buildHero()