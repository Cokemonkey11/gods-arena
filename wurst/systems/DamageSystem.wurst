package DamageSystem
import StandardTextTags
import public DamageEvent
import public CustomStatSystem
import PlayerData
import GameConstants
import CustomHeal

public enum DamageEvents
  START // First listener, where can be set stats for next listeners
  RELATIVE // Damage affected by multiplication and division
  ABSOLUTE // Damage affected by addition and subtraction
  CRIT // Damage affected by crits
  SHIELD // Damage reduced by shield
  FINAL // Final damage

init
  DamageEvent.addUnreducedListener(DamageEvents.START castTo int) ->
    let damageType = DamageEvent.getType()
    let tunit = DamageEvent.getTarget()

    if damageType == DamageType.ATTACK
      let tUnitEvasion = tunit.getStat(CustomUnitStats.EVASION)

      if tUnitEvasion > GetRandomReal(0, 1)
        DamageEvent.abortCurrent()
        createMissTextTag(tunit)

  DamageEvent.addUnreducedListener(DamageEvents.RELATIVE castTo int) ->
    let damageType = DamageEvent.getType()
    let sunit = DamageEvent.getSource()
    var bonusDamage = 0.

    if damageType == DamageType.ATTACK
      bonusDamage = DamageEvent.getAmount() * sunit.getStat(CustomUnitStats.ATTACK_POWER)

    else if damageType == DamageType.SPELL or damageType == DamageType.CODE 
      bonusDamage = DamageEvent.getAmount() * sunit.getStat(CustomUnitStats.SPELL_POWER)
      
    DamageEvent.addAmount(bonusDamage)

  DamageEvent.addUnreducedListener(DamageEvents.ABSOLUTE castTo int) ->
    let damageType = DamageEvent.getType()
    let sunit = DamageEvent.getSource()
    var bonusDamage = 0.

    if damageType == DamageType.ATTACK
      bonusDamage = sunit.getStat(CustomUnitStats.BONUS_ATTACK_DAMAGE)

    else if damageType == DamageType.SPELL or damageType == DamageType.CODE 
      bonusDamage = sunit.getStat(CustomUnitStats.BONUS_SPELL_DAMAGE)
      
    DamageEvent.addAmount(bonusDamage)

  DamageEvent.addUnreducedListener(DamageEvents.CRIT castTo int) ->
    let damageType = DamageEvent.getType()
    let sunit = DamageEvent.getSource()
    var bonusDamage = 0.

    if damageType == DamageType.ATTACK
      let attackCritChance = sunit.getStat(CustomUnitStats.ATTACK_CRIT_CHANCE)
      
      if attackCritChance > GetRandomReal(0, 1)
        bonusDamage = DamageEvent.getAmount() * sunit.getStat(CustomUnitStats.ATTACK_CRIT_POWER)

    else if damageType == DamageType.SPELL or damageType == DamageType.CODE 
      let spellCritChance = sunit.getStat(CustomUnitStats.SPELL_CRIT_CHANCE)
      
      if spellCritChance > GetRandomReal(0, 1)
        bonusDamage = DamageEvent.getAmount() * sunit.getStat(CustomUnitStats.SPELL_CRIT_POWER)
    
    DamageEvent.addAmount(bonusDamage)

// Lifesteal is calculated after all damage calculations
  DamageEvent.addListener() ->
    let damageType = DamageEvent.getType()
    let sunit = DamageEvent.getSource()

    if damageType == DamageType.ATTACK
      let lifestealAmount = sunit.getStat(CustomUnitStats.LIFESTEAL)
      
      if lifestealAmount != 0
        let healValue = DamageEvent.getAmount() * lifestealAmount
        sunit.healTarget(sunit, healValue, false)

    else if damageType == DamageType.SPELL or damageType == DamageType.CODE
      var attacker = sunit
      if sunit.hasAbility(LOCUST_ID) and sunit.getOwner().isHuman()
        attacker = pData.get(sunit.getOwner()).getHero().hero.actor
      let lifestealAmount = attacker.getStat(CustomUnitStats.SPELL_LIFESTEAL)
      
      if lifestealAmount != 0
        let healValue = DamageEvent.getAmount() * lifestealAmount
        attacker.healTarget(attacker, healValue, false)
    