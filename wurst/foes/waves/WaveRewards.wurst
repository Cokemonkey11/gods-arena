package WaveRewards
import ClosureEvents
import GameProperties
import PlayerData
import HashMap
import Wave
import Boss
import StandardTextTags

var expPerUnit = 0
var expPull = 0

var goldPerUnit = 0
var goldPull = 0

var bossWave = false

init
  EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
    let u = EventData.getDyingUnit()
    var bossWaveCondition = true

    if bossWave
      bossWaveCondition = u.isBoss()
    
    if bossWaveCondition and u.getOwner() == ENEMY_PLAYER

      // TODO condition to fix messages with 0 exp and gold rewards, cuz
      // Foes summons give exp and gold from pull.
      if expPull != 0
        // That condition means that if exp for 2 units is bigger then overall pull,
        // which means that there is not enough exp for 2 units in pull,
        // then there is only 1 unit left with some exp leftovers from division
        if expPerUnit * 2 > expPull
          pData.forEach() (player p, PlayerData playerData) ->
            if playerData.getHero().have
              playerData.getHero().hero.addXp(expPull, true)
          expPull -= expPull
        else
          pData.forEach() (player p, PlayerData playerData) ->
            if playerData.getHero().have
              playerData.getHero().hero.addXp(expPerUnit, true)
          expPull -= expPerUnit
          
      if goldPull != 0  
        if goldPerUnit * 2 > goldPull
          pData.forEach() (player p, PlayerData playerData) ->
            p.addGold(goldPull)
          createGoldBountyTextTag(u, goldPull)
          goldPull -= goldPull
        else
          pData.forEach() (player p, PlayerData playerData) ->
            p.addGold(goldPerUnit)
          createGoldBountyTextTag(u, goldPerUnit)
          goldPull -= goldPerUnit
      
      if u.isBoss()
        bossList.remove(u)
  
  onWaveStart() (Wave wave) ->
    let creepAmount = wave.creepAmount
    let waveExp = wave.expBounty
    let waveGold = wave.goldBounty

    bossWave = wave.bossWave
    
    expPull = waveExp + (waveExp * (8-pData.size())/7).round()
    goldPull = waveGold + (waveGold * (8-pData.size())/7).round()

    expPerUnit = (expPull / creepAmount).toInt()
    goldPerUnit = (goldPull / creepAmount).toInt()
