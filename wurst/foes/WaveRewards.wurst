package WaveRewards
import ClosureEvents
import GameProperties
import PlayerData
import HashMap
import Wave
import StandardTextTags

var expPerUnit = 0
var expPull = 0

var goldPerUnit = 0
var goldPull = 0

init
  EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
    let u = EventData.getDyingUnit()

    if u.getOwner() == ENEMY_PLAYER
      // That condition means that if exp for 2 units is bigger then overall pull,
      // which means that there is not enough exp for 2 units in pull,
      // then there is only 1 unit left with some exp leftovers from division
      if expPerUnit * 2 > expPull
        pData.forEach() (player p, PlayerData playerData) ->
          if playerData.getHero().have
            playerData.getHero().hero.addXp(expPull, true)
        expPull -= expPull
      else
        pData.forEach() (player p, PlayerData playerData) ->
          if playerData.getHero().have
            playerData.getHero().hero.addXp(expPerUnit, true)
        expPull -= expPerUnit
        
      if goldPerUnit * 2 > goldPull
        pData.forEach() (player p, PlayerData playerData) ->
          if playerData.getHero().have
            p.addGold(goldPull)
        createGoldBountyTextTag(u, goldPull)
        goldPull -= goldPull
      else
        pData.forEach() (player p, PlayerData playerData) ->
          if playerData.getHero().have
            p.addGold(goldPerUnit)
        createGoldBountyTextTag(u, goldPerUnit)
        goldPull -= goldPerUnit
  
  onWaveStart() (Wave wave) ->
    let creepAmount = wave.creepAmount
    let waveExp = wave.expBounty
    let waveGold = wave.goldBounty

    expPull = waveExp + (waveExp * 0.5 * (8-pData.size())/7).round()
    goldPull = waveGold + (waveGold * 0.5 * (8-pData.size())/7).round()

    expPerUnit = (expPull / creepAmount).toInt()
    goldPerUnit = (goldPull / creepAmount).toInt()
