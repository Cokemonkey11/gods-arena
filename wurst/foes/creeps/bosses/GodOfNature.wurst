package GodOfNature
import Entity
import GameProperties
import Boss
import AbilityTooltipGenerator
import ClosureTimers
import OrderIds
import BonusHandler
import PlayerData
import ClosureForGroups
import Assets
import SoundUtils
import InstantDummyCaster

constant ROOTS_ID = compiletime(ABIL_ID_GEN.next())
constant WISP_HEAL_ID = compiletime(ABIL_ID_GEN.next())
constant WISP_HEAL_DEF = compiletime(new ChannelAbilityPreset(WISP_HEAL_ID, 1, true)
  ..setDummyAbility()
  ..presetTargetTypes(Targettype.UNIT)
  ..setCastRange(1, 50)
)

constant GOD_OF_NATURE_ID = compiletime(UNIT_ID_GEN.next())
constant WISP_ID = compiletime(UNIT_ID_GEN.next())
constant TREANT_ID = compiletime(UNIT_ID_GEN.next())
vec2 array WISP_SPAWN_POINTS = [gg_rct_Arena1.getRightTop(), gg_rct_Arena1.getLeftTop(), gg_rct_Arena1.getLeftBot(), gg_rct_Arena1.getRightBot()]

constant BOSS_MUSIC_THEME = new SoundDefinition(Sounds.nightElfDefeat)

public class GodOfNature extends Boss
  construct(vec3 pos, angle ang)
    super(GOD_OF_NATURE_ID, pos, ang)
    BOSS_MUSIC_THEME.play()
    new SoundDefinition(Sounds.o05Cenarius29).play()
    castingBossSpells(actor)

    EventListener.add(actor, EVENT_PLAYER_UNIT_DEATH) () ->
      forUnitsAll() (unit u) ->
        if u.getTypeId() == WISP_ID or u.getTypeId() == TREANT_ID
          u.kill()
      BOSS_MUSIC_THEME.play(0)

public function castingBossSpells(unit boss)
  doAfter(8) ->
    if boss.isAlive()
      summonTreants()
      doAfter(5) -> 
        if boss.isAlive()
          entangleRoots()
          doAfter(10) ->
          if boss.isAlive() 
            summonWisps(boss)
            castingBossSpells(boss)

function summonTreants()
  for i = 0 to 5
    let u = createUnit(ENEMY_PLAYER, TREANT_ID, gg_rct_Arena1.randomPoint(), angle(GetRandomReal(0, 359)))
    doPeriodicallyCounted(2.5, 10) (CallbackCounted cb) ->
      u.addBonus(Bonus.LIFE, 200)
      u.addBonus(Bonus.DAMAGE, 15)
      u.setMoveSpeed(u.getMoveSpeed() - 34.5)
      u.setScale(2 - 0.1 * cb.getCount())

function summonWisps(unit boss)
  for i = 0 to 3
    let u = createUnit(ENEMY_PLAYER, WISP_ID, WISP_SPAWN_POINTS[i], angle(0))
    u.issueTargetOrder(WISP_HEAL_DEF.getOrderString(), boss)

function entangleRoots()
  pData.forEach() (player key, PlayerData value) ->
    let heroPos = value.getHero().getPos().toVec2()
    flashEffect(Abilities.healBottleMissile, heroPos.add(0, 200))
    flashEffect(Abilities.healBottleMissile, heroPos.add(0, -200))
    flashEffect(Abilities.healBottleMissile, heroPos.add(200, 0))
    flashEffect(Abilities.healBottleMissile, heroPos.add(-200, 0))
    doAfter(2) -> 
      forUnitsInRange(heroPos, 200) (unit u) ->
        if u.isEnemyOf(ENEMY_PLAYER) and not u.isIllusion()
          InstantDummyCaster.castTarget(ENEMY_PLAYER, ROOTS_ID, 1, OrderIds.entanglingroots, u)

init
  EventListener.onTargetCast(WISP_HEAL_ID) (unit caster, unit target) ->
    target.setHP(target.getHP() + target.getMaxHP() * 0.15)
    target.addBonus(Bonus.DAMAGE, 25)
    caster.kill()

@compiletime function genAbility()
  new UnitDefinition(WISP_ID, UnitIds.wisp)
  ..setHitPointsMaximumBase(500)
  ..setArmorType(ArmorType.Hero)
  ..setSpeedBase(188)
  ..setMovementType(MovementType.Fly)
  ..setNormalAbilities(WISP_HEAL_ID.toRawCode())
  
  new UnitDefinition(TREANT_ID, UnitIds.forceofnature)
  ..setAcquisitionRange(99999)
  ..setAttack1DamageBase(20)
  ..setDefenseBase(0)
  ..setSpeedBase(350)
  ..setHitPointsMaximumBase(500)

  new UnitDefinition(GOD_OF_NATURE_ID, UnitIds.keeperofthegrove)
  ..setAcquisitionRange(99999)
  ..setName("God of Nature")
  ..setAttack1DamageBase(100)
  ..setDefenseBase(5)
  ..setHitPointsMaximumBase(5000)
  ..setScalingValue(2.6)

  new AbilityDefinitionKeeperoftheGroveEntanglingRoots(ROOTS_ID)
  ..setDummyAbility()
  ..setDamageperSecond(1, 50)
  ..setDurationHero(1, 3)
  ..setDurationNormal(1, 3)
