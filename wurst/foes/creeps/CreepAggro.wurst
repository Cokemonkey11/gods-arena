package CreepAggro
import DamageEvent
import GameConstants
import HashMap
import LinkedList
import UnitIndexer
import Orders
import PlayerData

class AggroEntry
    unit source
    int aggro = 0

    construct(unit source, int aggro)
        this.source = source
        this.aggro = aggro

constant aggroMap = new HashMap<unit, LinkedList<AggroEntry>>()

init
    DamageEvent.addListener() -> 
        var source = DamageEvent.getSource()
        let target = DamageEvent.getTarget()
        let sourceOwner = source.getOwner()
        let targetOwner = target.getOwner()

        if targetOwner == ENEMY_PLAYER and sourceOwner != targetOwner
            if not aggroMap.has(target)
                aggroMap.put(target, new LinkedList<AggroEntry>())
            
            if source.hasAbility(LOCUST_ID)
                let pdata = pData.get(sourceOwner)
                source = pdata.getHero().hero.actor

            let aggroList = aggroMap.get(target)
            let first = aggroList.getFirst()
            var found = false
            for aggro in aggroList
                if aggro.source == source
                    aggro.aggro += DamageEvent.getAmount().toInt()
                    found = true
                    break

            if not found
                aggroList.add(new AggroEntry(source, DamageEvent.getAmount().toInt()))

            aggroList.sortWith((a, b) -> b.aggro - a.aggro)

            if first != aggroList.getFirst()
                target.issueTargetOrderById(OrderIds.attack, source)
                
            
    onUnitDeindex() ->
        let u = getIndexingUnit()
        let aggro = aggroMap.getAndRemove(u)
        if aggro != null
            for agg in aggro
                destroy agg
            destroy aggro
